#!/bin/bash
#
# Mapr Provider library for use with Zeta
#
##### The Following functions are required to have implementations to work with Zeta
#
# fs_rmdir
# fs_prepbase
# fs_mkdir
#
#


#
# fs_mkdir
#
#
function fs_mkvol(){
    local RESULT=$1
    local VPATH=$2
    local VNAME=$3
    local ROOTPERMS=$4


    if [ "$ROOTPERMS" == "" ]; then
        ROOTPERMS="775"
    fi

    getpaths "FUSEPATH" "HDFSPATH" "$VPATH"

    MAPR_DEFAULT="${IUSER}:fc,a,dump,restore,m,d%20${FSUSER}:fc,a,dump,restore,m,d&ae=$FSUSER"

    maprapi "RETCODE" "RETOUT" "/volume/create?name=${VNAME}&path=${HDFSPATH}&rootdirperms=${ROOTPERMS}&${MAPR_DEFAULT}"

    while [ "$RETCODE" != "0" ]; do
        @go.log WARN "Volume Creation did not work - Result: $RETCODE - try again?"
        read -e -p "Try Again? (Y/N): " -i "Y" TRY
        if [ "$TRY" == "Y" ]; then
            maprapi "RETCODE" "RETOUT" "/volume/create?name=${VNAME}&path=${HDFSPATH}&rootdirperms=${ROOTPERMS}&user=${MAPR_DEFAULT}"
        else
            @go.log WARN "User home vol creation failed"
        fi
    done
    if [ "$RETCODE" == "0" ]; then
        while [ ! -d "$FUSEPATH" ]; do
            sleep 1
           @go.log INFO "Waiting for $FUSEPATH sync"
        done
    fi
    eval $RESULT="'$RETCODE'"

}


#
#  Remove a directory by mountpoint. This is specifically important for FS implementation that use mount points as directories (where you can't just delete the directory via FUSE)
#  This should remove the directory wether it's a volume or not (if it's nots, just rm) and it will do based on the fuse base or not
#  $1 Result
#  $2 Path to directory to remove (Fuse Path, /CLUSTERBASE/CLUSTERNAME/PATH/TO/DIR or just /PATH/TO/DIR)
#
function fs_rmdir(){

    local RESULT=$1
    local DPATH=$2


    getpaths "FUSEPATH" "HDFSPATH" "$DPATH"

    mapr_volnamebymount "VOL_NAME" "$HDFSPATH"

    maprapi "APIRET" "APIOUT" "/volume/remove?name=${VOL_NAME}"

    if [ "$APIRET" != "0" ]; then
        @go.log WARN "fs_rmdir error: $API_OUT"
    fi

    if [ -d "$FUSEPATH" ]; then
        @go.log WARN "Error removing MapR Volume - It may not have existed, doing an RM of the path"
        sudo rm -rf $FUSEPATH
    fi
    RETSTR="0"
    if [ -d "$FUSEPATH" ]; then
        @go.log WARN "We attempted to remove $FUSEPATH - $HDFSPATH but it still exists"
        RETSTR="1"
    fi
    eval $RESULT="'$RETSTR'"
}



function fs_prepbase(){

   @go.log INFO "Checking default hbase and apps volumes and removing if exists"
    if [ -d "$CLUSTERMOUNT/hbase" ]; then
        @go.log WARN "Found $CLUSTERMOUNT/hbase  Should we remove?"
        read -e -p "Remove /hbase? (Y/N): " -i "Y" RMHBASE
        if [ "$RMHBASE" == "Y" ]; then
            fs_rmdir "RETCODE" "$CLUSTERMOUNT/hbase"
        fi
    fi
    if [ -d "$CLUSTERMOUNT/apps" ]; then
        @go.log WARN "Found $CLUSTERMOUNT/apps should we remove?"
        read -e -p  "Remove /apps (on a fresh install, answer yes) (Y/N): " -i "Y" RMAPPS
        if [ "$RMAPPS" == "Y" ]; then
            fs_rmdir "RETCODE" "$CLUSTERMOUNT/apps"
        fi
    fi

}



################################ The Following are provider specific functions that are not required by Zeta
function mapr_volnamebymount(){
    local RESULT=$1
    local HDFSP=$2

    maprapi "APIRET" "APIOUT" "/volume/list?filter=%5Bp%3D%3D${HDFSP}%5D&columns=n"

    if [ "$APIRET" == "0" ]; then
        VOLNAME=$(echo "$APIOUT"|grep -P -o "volumename\":\"[^\"]+\""|cut -d":" -f2|sed "s/\"//g")
    else
        VOLNAME=""
    fi
    eval $RESULT="'$VOLNAME'"
}
#
#
# maprapi - Sets up the MapR API calls based on creds
#
# Arguments
# $1 Retcode (0 for success 1 for failre)
# $2 Result
# $3 CMD to run
#
function maprapi(){
    #Base is https://HOST/rest"
    # CMD should be like "/volume/remove?name=mapr.hbase"
    local RETCODE=$1
    local RESULT=$2
    local CMD=$3

    HOST=$(echo $CLDBS|cut -d"," -f1|cut -d":" -f1)

    WEBHOST="$HOST:8443"

    mkdir -p ./tmp

    TFILE="./tmp/netrc.tmp"

    RT="0"

    touch $TFILE
    chown ${IUSER}:${IUSER} $TFILE
    chmod 600 $TFILE

cat > $TFILE << EOCRED
machine $HOST login $FSUSER password $FSUSER_PASS
EOCRED

    BASE_REST="https://$WEBHOST/rest"
    CURL_GET_BASE="/opt/mesosphere/bin/curl -k -s --netrc-file $TFILE $BASE_REST"

    CURL_RESULT=$(${CURL_GET_BASE}${CMD})
    ERR_RESULT=$(echo $CURL_RESULT|grep "ERROR")

    if [ "$ERR_RESULT" != "" ]; then
        @go.log WARN "MAPR API Failure: Command $CMD - Result: $CURL_RESULT"
        RT="1"
    else
        @go.log INFO "MAPR API Success: Command: $CMD - Results $CURL_RESULT"
    fi

    eval $RETCODE="'$RT'"
    eval $RESULT="'$CURL_RESULT'"
    rm $TFILE
}
