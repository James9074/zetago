#!/bin/bash
#
# Mapr Provider library for use with Zeta
#
##### The Following functions are required to have implementations to work with Zeta
#
#
#
#
#
#

#
#  Remove a directory by mountpoint. This is specifically important for FS implementation that use mount points as directories (where you can't just delete the directory via FUSE)
#  This should remove the directory wether it's a volume or not (if it's nots, just rm) and it will do based on the fuse base or not
#  $1 Result
#  $2 Path to directory to remove (Fuse Path, /CLUSTERBASE/CLUSTERNAME/PATH/TO/DIR or just /PATH/TO/DIR)
#
function fs_rmdir(){

    local RESULT=$1
    local DPATH=$2

    FUSEPATH=""
    HDFSPATH=""
    echo "DPATH: $DPATH"
    CHK=$(echo "$DPATH"|grep "$CLUSTERMOUNT")
    if [ "$CHK" != "" ]; then
        @go.log INFO "$CLUSTERMOUNT found in DIR to delete, assuming FUSE Path provided"
        FUSEPATH="$DPATH"
        HDFSPATH=$(echo "$DPATH"|sed "s@$CLUSTERMOUNT@@g")
    else
        @go.log INFO "$CLUSTERMOUNT not found in DIR, assuming HDFS Path provided"
        FUSEPATH="${CLUSTERMOUNT}${DPATH}"
        HDFSPATH="$DPATH"
    fi
    mapr_volnamebymount "VOL_NAME" "$HDFSPATH"
    echo "The volumne name for $HDFSPATH is $VOL_NAME"
    # To get the volume name, we



}



################################ The Following are provider specific functions that are not required by Zeta
function mapr_volnamebymount(){
    local RESULT=$1
    local HDFSP=$2

    maprapi "APIRET" "APIOUT" "/volume/list?filter=%5Bp%3D%3D${HDFSP}%5D&columns=n"

    if [ "$APIRET" == "0" ]; then
        VOLNAME=$(echo "$APIOUT"|grep -P -o "volumename\":\"[^\"]\""|cut -d":" -f2|sed "s/\"//g")
    else
        VOLNAME=""
    fi
    eval $RESULT="'$VOLNAME'"
    #{"timestamp":1485892034121,"timeofday":"2017-01-31 07:47:14.121 GMT+0000","status":"OK","total":1,"data":[{"volumename":"mapr.hbase"}]}
}
#
#
# maprapi - Sets up the MapR API calls based on creds
#
# Arguments
# $1 Retcode (0 for success 1 for failre)
# $2 Result
# $3 CMD to run
#
function maprapi(){
    #Base is https://HOST/rest"
    # CMD should be like "/volume/remove?name=mapr.hbase"
    local RETCODE=$1
    local RESULT=$2
    local CMD=$3

    HOST=$(echo $CLDBS|cut -d"," -f1|cut -d":" -f1)

    WEBHOST="$HOST:8443"

    mkdir -p ./tmp

    TFILE="./tmp/netrc.tmp"

    RT="0"

    touch $TFILE
    chown ${IUSER}:${IUSER} $TFILE
    chmod 600 $TFILE

cat > $TFILE << EOCRED
machine $HOST login $FSUSER password $FSUSER_PASS
EOCRED

    BASE_REST="https://$WEBHOST/rest"
    CURL_GET_BASE="/opt/mesosphere/bin/curl -k -s --netrc-file $TFILE $BASE_REST"

    CURL_RESULT=$(${CURL_GET_BASE}${CMD})
    ERR_RESULT=$(echo $CURL_RESULT|grep "ERROR")

    if [ "$ERR_RESULT" != "" ]; then
        @go.log WARN "MAPR API Failure: Command $CMD - Result: $CURL_RESULT"
        RT="1"
    else
        @go.log INFO "MAPR API Success: Command: $CMD - Results $CURL_RESULT"
    fi

    eval $RETCODE="'$RT'"
    eval $RESULT="'$CURL_RESULT'"
    rm $TFILE
}
